Atue como um redator t√©cnico especialista em documenta√ß√£o para projetos de sistemas embarcados. Sua tarefa √© criar um arquivo README.md completo e bem formatado para um projeto de Raspberry Pi Pico W.

**Nome do Projeto:**
PicoTermoControl: Sistema de Controle de Temperatura PI com Atuadores Coordenados e Interface Web

**Instru√ß√µes Gerais:**
- O formato de sa√≠da deve ser Markdown.
- Utilize emojis para destacar os t√≠tulos das se√ß√µes.
- Utilize tabelas para listas de hardware e pinagem.
- Utilize blocos de c√≥digo para comandos de terminal e estruturas de arquivos.
- A linguagem do documento deve ser Portugu√™s do Brasil.
- Baseie toda a documenta√ß√£o nos arquivos de c√≥digo que fornecerei abaixo do prompt.

---

**Estrutura do README.md (Siga esta ordem):**

**1. T√≠tulo e Badges:**
   - Comece com o nome completo do projeto como t√≠tulo principal (`#`).
   - Adicione 4 badges (escudos) para: Linguagem (C/C++), Hardware (Raspberry Pi Pico W), Algoritmo (Controle PI) e Interface (Web UI).

**2. Descri√ß√£o Breve (`### üìù Descri√ß√£o Breve`):**
   - Analise o `main.c` para entender o prop√≥sito geral.
   - Escreva um par√°grafo conciso explicando o que o projeto faz. Destaque os componentes principais (Pico W, AHT20), o algoritmo central (Controle PI) e as formas de intera√ß√£o (Web, OLED, Serial). Mencione a atua√ß√£o coordenada do servo e da ventoinha.

**3. Funcionalidades Principais (`### ‚ú® Funcionalidades Principais`):**
   - Crie uma lista de funcionalidades com marcadores.
   - Comece cada item com o emoji "‚úÖ".
   - Extraia as funcionalidades dos c√≥digos: Controle PI, atuadores coordenados, dashboard web, interface local com menus, sistema de status com LED/Buzzer.

**4. Hardware Necess√°rio (`### ‚öô Hardware Necess√°rio`):**
   - Crie uma tabela com as colunas "Componente", "Quant." e "Observa√ß√µes".
   - Analise a se√ß√£o de `#define` no `main.c` e as bibliotecas inclu√≠das (`aht20.h`, `ssd1306.h`, etc.) para listar todos os componentes de hardware necess√°rios.

**5. Conex√µes e Configura√ß√£o (`### üîå Conex√µes e Configura√ß√£o`):**
   - Crie se√ß√µes para cada barramento de comunica√ß√£o (I2C0, I2C1) e para os demais pinos (Atuadores, Feedback e Controles).
   - Extraia a pinagem diretamente dos `#define` no `main.c`.
   - Adicione uma nota de aviso sobre a alimenta√ß√£o externa para o servo e o driver do motor.

**6. Come√ßando (`### üöÄ Come√ßando`):**
   - Crie duas subse√ß√µes: "Pr√©-requisitos de Software" e "Configura√ß√£o e Compila√ß√£o".
   - Em "Pr√©-requisitos", liste as ferramentas padr√£o (Pico SDK, CMake, etc.).
   - Em "Configura√ß√£o e Compila√ß√£o", explique que o usu√°rio deve editar as credenciais de Wi-Fi no `main.c` e forne√ßa um bloco de c√≥digo com os comandos `git clone`, `mkdir build`, `cd build`, `cmake ..`, `make`, e `cp`. Use placeholders como `[URL_DO_SEU_REPOSITORIO]`.

**7. Estrutura do Projeto (`### üìÅ Estrutura do Projeto`):**
   - Analise o `CMakeLists.txt` e a lista de arquivos para criar uma representa√ß√£o em √°rvore da estrutura de diret√≥rios do projeto.

**8. Solu√ß√£o de Problemas (`### üêõ Solu√ß√£o de Problemas`):**
   - Crie uma lista com marcadores para problemas comuns.
   - Sugira solu√ß√µes baseadas no hardware utilizado: problemas de conex√£o Wi-Fi (verificar credenciais), falha no sensor (verificar I2C), atuadores n√£o funcionando (verificar alimenta√ß√£o externa), dashboard n√£o carregando (verificar IP e rede).

---

**Arquivos de C√≥digo para An√°lise:**

**CMakeLists.txt:**
```cmake
[COLE O CONTE√öDO DO SEU CMakeLists.txt AQUI]